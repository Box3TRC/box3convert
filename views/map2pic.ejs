<!DOCTYPE html>
<html class="mdui-theme-dark" lang="zh-CN">
<%-include("_head",{title})%>

    <body class="line-numbers">
        <%include _topbar%>
            <div style="padding: 16px;">
                <div class="mdui-prose">
                    <h1>岛三俯视图转换工具</h1>
                    <h3>如何获取俯视数据？</h3>
                    <p>请选择地图大小</p>
                    <mdui-select value="256" id="select-mapsize">
                        <mdui-menu-item value="16">16x16</mdui-menu-item>
                        <mdui-menu-item value="32">32x32</mdui-menu-item>
                        <mdui-menu-item value="64">64x64</mdui-menu-item>
                        <mdui-menu-item value="128">128x128</mdui-menu-item>
                        <mdui-menu-item value="256">256x256</mdui-menu-item>
                        <mdui-menu-item value="512">512x512</mdui-menu-item>
                        <mdui-menu-item value="1024">1024x1024</mdui-menu-item>
                    </mdui-select>
                    <p>将以下代码粘贴到box3的控制台，按下回车。使用f12并点击左上角选取选中控制台的输出并复制。</p>
                    <pre><code class="language-js" id="jscode"></code></pre>
                    <h3>俯视数据</h3>
                    <mdui-text-field id="blockDat" rows="5" placeholder="请粘贴[数组格式]"></mdui-text-field>
                    <mdui-button variant="text" id="example-data" icon="question_mark">查看范例</mdui-button>
                    <h3>自定义方块对应颜色值</h3>
                    <mdui-list id="list-blockColor" style="max-height: 200px;overflow-y:auto;"></mdui-list>
                    <mdui-button variant="tonal" id="addColor" icon="add">添加</mdui-button>
                    <mdui-button variant="tonal" id="autoColor" icon="brightness_auto">自动扫描所有方块</mdui-button>
                    <mdui-button variant="outlined" id="uploadColor" icon="upload">加载颜色预设</mdui-button>
                    <mdui-button variant="outlined" id="downloadColor" icon="download">保存颜色预设</mdui-button>
                    <mdui-button variant="elevated" id="clearColor" icon="delete">清空</mdui-button><br><br>
                    <input type="file" id="uploadColorLoader" style="display: none;">
                    <span>如果不指定方块的颜色值，转换后有的方块可能会变成错误的颜色</span><br>
                    <span>岛三中的纯色方块（非光源）会被默认指定颜色，在此也可重新指定</span><br>
                    <span>自动扫描功能的颜色值在没有默认值时是随机的，点击修改颜色。</span>
                    <!-- <h2>高级设置</h2><mdui-switch id="switch-advanced"></mdui-switch>
                    <div id="advanced">
                        <h3><b>[高级]</b>旋转（轴排列）</h3>
                        <p>轴排列，axis permutation，只能输入xyz排列，大写即翻转轴<br>如果你不了解这是什么，请保持xzy</p>
                        <mdui-text-field label="旋转(默认xzy)" value="xzy" id="axis" maxlength="3"></mdui-text-field>
                    </div> -->
                </div>
                <br>
                <mdui-button id="submit">转换</mdui-button>
                <mdui-button id="savecanvas" variant="tonal">下载为png</mdui-button>
            </div>
            <mdui-dialog class="blockColorDialog" headline="添加自定义方块颜色" description="方块转换后会被设置为此颜色">
                <mdui-text-field label="方块的name" id="dlg_blockname"></mdui-text-field>
                <!-- <mdui-button id="dlg_blockcolor">选择颜色</mdui-button> -->
                <br>
                <span>颜色值：</span><input value="rgb(0,0,0)"
                    data-jscolor="{format: 'rgb',required: false,previewPosition: 'right'}" id="dlg_blockcolor">
                <mdui-button slot="action" variant="standard" icon="delete" class="delete-block"
                    blockname="">删除</mdui-button>
                <mdui-button slot="action" variant="text" id="dlg_cancel">取消</mdui-button>
                <mdui-button slot="action" variant="tonal" id="dlg_add">添加</mdui-button>
            </mdui-dialog>
            <canvas id="canvasimg" width="255" height="255"> 你的浏览器不支持 canvas，请升级你的浏览器。 </canvas>
            <script src="/javascripts/jscolor.js"></script>
            <script src="/javascripts/voxels.box3.js"></script>
            <script>
                var blockColors = {};
                jscolor.install();
                function generateJSCode(mapsize){
                    return `let arr=[];
for(x=0;x<${mapsize-1};x++){for(z=0;z<${mapsize-1};z++){flag=false;for(y=128;y>=0;y--){if(voxels.getVoxel(x,y,z)!=0&&voxels.getVoxel(x,y,z)!=650){arr.push(voxels.getVoxel(x,y,z));flag=true;break;}}if(!flag)arr.push(0);}};
console.log(arr);`
                }
                $("#select-mapsize").on("change",()=>{
                    let code=generateJSCode(parseInt($("#select-mapsize").val()));
                    $("#jscode").html(code);
                    Prism.highlightAll() 
                })
                $("#select-mapsize").trigger("change");
                $("#example-data").on("click", () => {
                    setTimeout(() => { Prism.highlightAll() }, 10)
                    mdui.dialog({
                        headline: "数据示范",
                        body: `暂无`,
                        actions: [
                            {
                                text: "关闭",
                                onClick: () => {
                                    return true;
                                },
                            }
                        ]
                    });
                })
                const color_dlg = $(".blockColorDialog").get(0);
                $("#addColor").on("click", () => {
                    $(".delete-block").hide();
                    $("#dlg_blockname").prop("disabled", false)
                    color_dlg.open = true;
                })
                $("#dlg_cancel").on("click", () => {
                    color_dlg.open = false;
                })
                $("#dlg_add").on("click", () => {
                    if ($("#dlg_blockname").val().length == 0 || !$("#dlg_blockcolor").val()) {
                        mdui.snackbar({
                            message: "请输入方块名称和颜色值"
                        });
                        return;
                    }
                    let blockname = $("#dlg_blockname").val();
                    let blockcolor = { r: $("#dlg_blockcolor").get(0).jscolor.channel("R"), g: $("#dlg_blockcolor").get(0).jscolor.channel("G"), b: $("#dlg_blockcolor").get(0).jscolor.channel("B") };
                    blockColors[blockname] = blockcolor;
                    refreshColorList();
                    color_dlg.open = false;
                });
                function refreshColorList() {
                    let list = $("#list-blockColor");
                    list.empty();
                    for (let name in blockColors) {
                        let color = blockColors[name];
                        let ele = $(`<mdui-list-item>${name}
                            <div slot="icon" style="width:30px;height:30px;background-color:rgb(${color.r},${color.g},${color.b});"></div>
                            </mdui-list-item>`);
                        ele.on("click", () => {
                            $("#dlg_blockname").val(name);
                            $("#dlg_blockname").prop("disabled", true)// disabled
                            $(".delete-block").attr("blockname", name);
                            $(".delete-block").show();
                            $("#dlg_blockcolor").get(0).jscolor.fromString(`rgb(${color.r},${color.g},${color.b})`);
                            color_dlg.open = true;
                        });
                        list.append(ele);
                    }
                }
                $(".delete-block").on("click", (event) => {
                    let name = $(event.target).attr("blockname");
                    delete blockColors[name];
                    color_dlg.open = false;
                    refreshColorList();
                });
                $("#autoColor").on("click", () => {
                    try { JSON.parse($("#blockDat").val()); }
                    catch (e) {
                        mdui.snackbar({
                            message: "数据错误，请检查数据格式"
                        })
                        return;
                    };
                    let data = JSON.parse($("#blockDat").val());
                    for (let id of data) {
                        let block = box3voxels.name(id);
                        let color = { r: Math.floor(Math.random() * 256), g: Math.floor(Math.random() * 256), b: Math.floor(Math.random() * 256) };
                        blockColors[block] = color;
                        if (BLOCKS[block]) blockColors[block] = BLOCKS[block];
                    }
                    mdui.snackbar({
                        message: "自动扫描完成，请手动调整颜色值。"
                    })
                    refreshColorList();
                });
                $("#clearColor").on("click", () => {
                    blockColors = {};
                    refreshColorList();
                });
                $("#uploadColor").on("click", () => {
                    $("#uploadColorLoader").get(0).click();
                });
                $("#uploadColorLoader").on("input", () => {
                    let file = $("#uploadColorLoader").get(0).files[0];
                    if (!file) return;
                    try {
                        let reader = new FileReader();
                        reader.readAsText(file);
                        reader.onload = function (e) {
                            try {
                                let data = JSON.parse(this.result);
                                // validate data "block":{r,g,b} 0-255 null
                                for (let block in data) {
                                    if ((data[block].r == undefined || data[block].g == undefined || data[block].b == undefined) || (data[block].r < 0 || data[block].r > 255 || data[block].g < 0 || data[block].g > 255 || data[block].b < 0 || data[block].b > 255)) {
                                        mdui.snackbar({ message: `上传的文件格式不正确，请重新上传。(rgb ${block}:${JSON.stringify(data[block])})` })
                                        return;
                                    }
                                }
                                blockColors = data;
                                refreshColorList();
                                mdui.snackbar({ message: "加载完成" })
                            } catch (e) {
                                mdui.snackbar({ message: "上传的文件格式不正确，请重新上传。(json)" })
                            }
                        }
                        reader.onerror = function (e) {
                            mdui.snackbar({ message: `读取错误：${e}` })
                        }
                    } catch (e) {
                        mdui.snackbar({ message: `读取错误：${e}` })
                    }
                    $("#uploadColorLoader").get(0).value = '';
                });
                $("#downloadColor").on("click", () => {
                    if (Object.keys(blockColors).length == 0) {
                        mdui.snackbar({ message: "列表为空，没有可下载的预设" });
                        return;
                    }
                    var blob = new Blob([JSON.stringify(blockColors)], { type: "application/json" });
                    var url = URL.createObjectURL(blob);
                    var a = document.createElement("a");
                    a.href = url;
                    a.download = `预设-${Date.now()}.json`;
                    a.click();
                    URL.revokeObjectURL(url);
                });
                var canvas = document.getElementById('canvasimg');
                var ctx = canvas.getContext('2d');
                ctx.fillStyle = "white"
                ctx.fillRect(0, 0, canvas.width, canvas.height);
                var DEFAULT_COLOR="white";
                function setPixel(x, y, c) {
                    ctx.fillStyle = c;
                    ctx.fillRect(x, y, 1, 1);
                }
                async function drawOnCanvas() {
                    let surfacedata=JSON.parse($("#blockDat").val());
                    let mapsize=parseInt($("#select-mapsize").val())-1;
                    let surfacedata_2_vec = {}
                    let vec_2_surfacedata = {}
                    cnt = 0
                    for (let x = 0; x < mapsize; x++) {
                        for (let z = 0; z < mapsize; z++) {
                            surfacedata_2_vec[cnt] = [x, z];
                            vec_2_surfacedata[`${x},${z}`] = cnt;
                            cnt++;
                        }
                    }
                    console.log(surfacedata.length, mapsize, mapsize * mapsize)
                    var BLOCKS = Object.assign(Object.assign({}, BLOCKS), blockColors);
                    for (let x = 0; x < mapsize; x++) {
                        for (let z = 0; z < mapsize; z++) {
                            let block_id = surfacedata[vec_2_surfacedata[`${x},${z}`]];
                            let block_name = box3voxels.name(block_id)
                            let block_color = DEFAULT_COLOR;
                            if (BLOCKS[block_name]) {
                                let rgb=BLOCKS[block_name]
                                block_color = `rgb(${rgb.r},${rgb.g},${rgb.b})`;
                            }
                            //console.log(block_id,block_name,block_color)
                            setPixel(x, z, block_color);
                        }
                    }
                }
                $("#savecanvas").on("click",()=>{
                    let dataURL=canvas.toDataURL('image/png');
                    const link = document.createElement('a');
                    link.download = `俯视图-${Date.now()}.png`;
                    link.href = dataURL;
                    link.click();
                    link.remove();
                    mdui.snackbar({
                        message:"已下载，请检查下载列表"
                    })
                })
                function base64toBytes(base64) {
                    var binaryString = window.atob(base64)
                    var binaryLen = binaryString.length
                    var bytes = new Uint8Array(binaryLen)
                    for (var i = 0; i < binaryLen; i++) {
                        var ascii = binaryString.charCodeAt(i)
                        bytes[i] = ascii
                    }
                    return bytes
                }
                function download(bytes, name) {
                    var blob = new Blob([bytes]);
                    var link = document.createElement('a');
                    link.href = URL.createObjectURL(blob);
                    link.download = name;
                    link.click();
                }

                $('#submit').on('click', function () {
                    try { JSON.parse($("#blockDat").val()); }
                    catch (e) {
                        mdui.snackbar({
                            message: "数据错误，请检查数据格式"
                        })
                        return;
                    };
                    drawOnCanvas().then(()=>{
                        mdui.snackbar({
                            message: "绘制完成"
                        })
                    })
                });
            </script>
            <%include _footer%>
    </body>

</html>